자바 소스코드의 구조

1. 패키지 선언
 package : 자바 클래스 파일들을 모아 기능별로 분류하기 위한 일종의 디렉토리
 - 첫줄에 자동생성, 클래스를 식별하는 관리자 역할
 - 패키지 이름으로 숫자, 특수문자 사용 불가능, 모두 소문자로 작성
 - 패키지의 점(.)은 [상위패키지].[하위패키지].[클래스]을 의미
  ex)  com.oracle.util은 폴더 파일 경로 com\oracle\util이랑 동일

2. 패키지 가져오기
 - 다른 패키지의 자바 표준 api나 클래스 파일을 가져올 때 사용 (소스 간략화가 목적)
 - import문을 선언할 때, 별표(*)를 사용하면 해당 패키지에 포함된 모든 클래스를 사용 가능
  but! 모든 하위 패키지의 클래스까지는 포함 x

3. 클래스 블록
 - 클래스 : java에서 객체를 생성하기 위한 설계도 같은 것
 ex ) 붕어빵을 만들 때 붕어빵틀 같은 것
 - 클래스의 구성
  필드(field) : 객체의 데이터를 저장
  생성자(constructor) : 생성된 객체를 초기화
  메서드(method) : 객체의 동작을 실행
  내부 클래스(lnner class) : 클래스나 인터페이스의 내부에 선언

4. 메인 메소드 블록
 - main 메서드 : 프로그램을 구동하는 메인 스레드
 - main 메서드 구성
  public : 모든 클래스에서도 해당 변수나 메서드가 접근이 가능하다는 의미로 프로그램의 시작은 main이기 때문에 다른 곳에서도 호출할 수 있도록 public을 사용
  static : 자바가 compile이 되는 순간 가장 빠르게 정의되어 별도의 객체 생성 없이 모든 객체와 공유가 가능
  void : 별도로 return 값 없이 메소드를 실행하고 끝난다는 의미
  main : 이 메서드가 main 메서드라는 의미
  string[] args : 연속적인 문자열 데이터가 들어가는 저장 공간. 터미널에서 자바프로그램을 실행할때 인수를 줄수있는데 이 값이 이곳으로 들어오게 된다.
  
  [메인 메서드가 없을 경우]
   컴파일 할 때 프로그램은 알아서 main 메서드를 찾아 진입점으로 인식하기 때문에 main 메서드가 없으면 에러가 생기게 된다. 
   따라서 진입점(메인) 없는 라이브러리 형태의 프로그램을 작성하고자 할 때는 컴파일 할 때 
   옵션에 /reference를 사용하여 라이브러리 형태라는 것을 명시해 주어야 에러가 발생하지 않는다.
   만일 main 메서드가 여러개 있을 경우 어떤 메서드를 진입점으로 사용할 것인지 컴파일러에 지시를 내려주지 않으면 역시 에러 발생한다.

 5. 명령문
  - 문장(statement)은 컴퓨터에게 작업을 지시하는 최소 구성단위
  - 문장의 끝은 항상 세미콜론(;)을 붙여서 하나의 문장임을 표시


출처: https://inpa.tistory.com/entry/JAVA-☕-자바-소스-코드-구조-한눈에-이해하기 [Inpa Dev 👨‍💻:티스토리]
